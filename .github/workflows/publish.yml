name: Publish dslinter and upload to PyPI

on:
  push:
    tags:
      - "v*"

jobs:

  build_golang:
    name: Build and tests dslinter's Python source code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true  # Fetch Hugo themes (true OR recursive)
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install

      - name: Run tests
        run:
           poetry run pytest --cov=./ --cov-report=xml --cov-fail-under=80         

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: coverage.xml
          fail_ci_if_error: true

      - name: Run pylint on dslinter source code
        run: poetry run pylint dslinter --fail-under=8

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Build mllint & release to GitHub
      #   uses: goreleaser/goreleaser-action@v2
      #   with:
      #     version: latest
      #     args: release --rm-dist
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: mllint-binaries
      #     path: ./dist

  build_wheels:
    name: Build Pip wheels on ${{ matrix.os }}
    needs: build_golang
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/setup-python@v2
      - uses: actions/checkout@v2

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==1.10.0

      - name: Set MLLINT_VERSION
        shell: bash
        run: echo "MLLINT_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Download mllint executables from previous job
        uses: actions/download-artifact@v2
        with:
          name: mllint-binaries
          path: ./build/bin

      - name: Clean & Prepare packaging
        shell: bash
        run: |
          rm -r build/build build/dist build/mllint.egg-info || true
          cp ReadMe.md build/
      - name: Build Pip wheels
        shell: bash
        run: |
          export CIBW_ENVIRONMENT="MLLINT_VERSION=$MLLINT_VERSION"
          cibuildwheel ./build --output-dir ./build/wheelhouse
        env:
          CIBW_ARCHS_MACOS: x86_64 arm64

      - uses: actions/upload-artifact@v2
        with:
          name: pip-wheels
          path: ./build/wheelhouse/*.whl

  build_sdist:
    name: Build Pip package source distribution
    needs: build_golang
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2

      - name: Set MLLINT_VERSION
        run: echo "MLLINT_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Download mllint executables from previous job
        uses: actions/download-artifact@v2
        with:
          name: mllint-binaries
          path: ./build/bin

      - name: Clean & Prepare packaging
        run: |
          rm -r build/build build/dist build/mllint.egg-info || true
          cp ReadMe.md build/
      - name: Build Pip package source distribution
        working-directory: ./build
        run: python setup.py sdist

      - uses: actions/upload-artifact@v2
        with:
          name: pip-source-package
          path: ./build/dist/*.tar.gz

  upload_pypi:
    name: Upload Pip packages to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: pip-source-package
          path: dist
      - uses: actions/download-artifact@v2
        with:
          name: pip-wheels
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
